trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Self-hosted agent

variables:
  appName: 'MyNextJsApp'
  parentSite: 'Optimus Apps'  # Parent site name
  unzipPath: 'C:\\Cicd-frontend'
  deployPath: 'C:\\Cicd-frontend\\$(appName)'
  appPoolName: 'AppPool_$(appName)'
  zipPath: '$(Build.ArtifactStagingDirectory)\nextjs-app.zip'
  # Note: No longer defining siteName as we'll use the parent site
  # No longer defining port variables as we'll use parent site bindings

steps:

# === CLEAN MEMORY PRE-STEP ===
- script: |
    echo Cleaning system memory...
    powershell -Command "Clear-EventLog -LogName * -ErrorAction SilentlyContinue"
    powershell -Command "[System.GC]::Collect()"
    powershell -Command "if (Test-Path 'cleanmgr.exe') { Start-Process -NoNewWindow -FilePath 'cleanmgr.exe' -ArgumentList '/sagerun:1' }"
  displayName: 'Free system memory and clean logs (pre-build)'
  continueOnError: true

# === INSTALL NODE ===
- task: NodeTool@0
  inputs:
    versionSpec: '22.x'
  displayName: 'Install Node.js'

# === INSTALL DEPENDENCIES ===
- script: |
    echo Installing dependencies...
    npm install
    echo Cleaning npm and yarn cache...
    npm cache clean --force
    if exist "%LocalAppData%\Yarn\Cache" rmdir /s /q "%LocalAppData%\Yarn\Cache"
  displayName: 'Install dependencies and clean npm/yarn cache'

# === BUILD APP & CLEAN CACHE ===
- script: |
    echo Building the Next.js app...
    npm run build

    echo Removing build caches...
    if exist node_modules\.cache rmdir /s /q node_modules\.cache
    if exist .next\cache rmdir /s /q .next\cache
  displayName: 'Build Next.js and remove build cache'

# === ZIP BUILD ARTIFACTS ===
- script: |
    echo Zipping build artifacts...
    powershell -Command "if (!(Test-Path '.next')) { Write-Error '.next directory not found!'; exit 1 }"
    powershell -Command "Get-ChildItem -Path '.next' -Recurse | Measure-Object | Select-Object -ExpandProperty Count"
    powershell Compress-Archive -Path .next\* -DestinationPath "$(zipPath)" -Force
    powershell -Command "if (!(Test-Path '$(zipPath)')) { Write-Error 'Zip file was not created!'; exit 1 }"
    powershell -Command "Get-Item '$(zipPath)' | Select-Object Length"
  displayName: 'Zip build artifacts'

# === PUBLISH BUILD ARTIFACT ===
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(zipPath)'
    artifactName: 'nextjs-app'
    publishLocation: 'Container'
  displayName: 'Publish zipped artifact'

# === DOWNLOAD ARTIFACT FOR DEPLOYMENT ===
- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: 'nextjs-app'
    downloadPath: '$(Build.SourcesDirectory)\artifact'
  displayName: 'Download build artifact for deployment'

# === VERIFY DOWNLOADED ARTIFACT ===
- script: |
    echo Verifying downloaded artifact...
    powershell -Command "if (!(Test-Path '$(Build.SourcesDirectory)\artifact\nextjs-app\nextjs-app.zip')) { Write-Error 'Downloaded zip file not found!'; exit 1 }"
    powershell -Command "Get-Item '$(Build.SourcesDirectory)\artifact\nextjs-app\nextjs-app.zip' | Select-Object Length"
  displayName: 'Verify downloaded artifact'

# === VERIFY IIS FEATURES ARE INSTALLED ===
- task: PowerShell@2
  displayName: 'Verify IIS Prerequisites and Parent Site'
  inputs:
    targetType: 'inline'
    script: |
      # Check if Web-Server role is installed
      $iisFeature = Get-WindowsFeature -Name Web-Server -ErrorAction SilentlyContinue
      if (-not $iisFeature.Installed) {
        Write-Warning "IIS Web-Server feature is not installed on this agent."
      } else {
        Write-Host "IIS Web-Server feature is installed."
      }
      
      # Test WebAdministration module
      try {
        Import-Module WebAdministration -ErrorAction Stop
        Write-Host "WebAdministration module is available."
      } catch {
        Write-Warning "WebAdministration module is not available. Error: $_"
        # Try to install the module if not present
        if (Get-Command Install-WindowsFeature -ErrorAction SilentlyContinue) {
          Write-Host "Attempting to install WebAdministration module..."
          Install-WindowsFeature -Name Web-Scripting-Tools -ErrorAction SilentlyContinue
        }
      }
      
      # Verify parent site exists
      $parentSiteName = "$(parentSite)"
      $parentSiteExists = Get-Website -Name $parentSiteName -ErrorAction SilentlyContinue
      
      if (-not $parentSiteExists) {
        Write-Error "Parent site '$parentSiteName' does not exist. Cannot deploy child application."
        exit 1
      } else {
        Write-Host "Parent site '$parentSiteName' exists with the following bindings:"
        $parentSiteExists.bindings.Collection | Format-Table protocol, bindingInformation -AutoSize
      }
      
      # List existing sites and app pools for reference
      Write-Host "--- Existing IIS Sites ---"
      Get-Website | Format-Table Name, ID, State, PhysicalPath -AutoSize
      
      Write-Host "--- Existing Applications ---"
      Get-WebApplication | Format-Table path, applicationPool, PhysicalPath -AutoSize
      
      Write-Host "--- Existing Application Pools ---"
      Get-ChildItem IIS:\AppPools | Format-Table Name, State -AutoSize
    pwsh: false
    errorActionPreference: 'continue'

# === CD: DEPLOY TO IIS AS CHILD APPLICATION - ENHANCED VERSION ===
- task: PowerShell@2
  displayName: 'Deploy as Child Application under Parent Site'
  inputs:
    targetType: 'inline'
    script: |
      $ErrorActionPreference = "Stop"
      
      try {
        $zipPath = "$(Build.SourcesDirectory)\artifact\nextjs-app\nextjs-app.zip"
        $deployPath = "$(deployPath)"
        $appPool = "$(appPoolName)"
        $parentSite = "$(parentSite)"
        $appName = "$(appName)"
        $appPath = "/$appName"  # Web application path under parent site
        
        Write-Host "Starting deployment process with following parameters:"
        Write-Host "Zip Path: $zipPath"
        Write-Host "Deploy Path: $deployPath"
        Write-Host "App Pool: $appPool"
        Write-Host "Parent Site: $parentSite"
        Write-Host "Application Path: $appPath"
        
        # Verify the zip file exists
        if (-not (Test-Path $zipPath)) {
          throw "Zip file not found at path: $zipPath"
        }
        
        # Verify parent site exists
        $parentSiteExists = Get-Website -Name $parentSite -ErrorAction SilentlyContinue
        if (-not $parentSiteExists) {
          throw "Parent site '$parentSite' does not exist. Cannot deploy child application."
        }
        
        Write-Host "Importing WebAdministration module..."
        Import-Module WebAdministration
        
        Write-Host "Stopping existing App Pool if exists..."
        if (Test-Path "IIS:\AppPools\$appPool") {
          try {
            if ((Get-WebAppPoolState -Name $appPool).Value -eq "Started") {
              Stop-WebAppPool -Name $appPool
              Write-Host "App Pool $appPool stopped successfully."
            }
          } catch {
            Write-Warning "Error stopping app pool: $_"
          }
        } else {
          Write-Host "App Pool $appPool does not exist yet. Will create new."
        }
        
        Write-Host "Creating deploy directory if not exists..."
        if (-not (Test-Path -Path $deployPath)) {
          New-Item -ItemType Directory -Path $deployPath -Force | Out-Null
          Write-Host "Created directory: $deployPath"
        } else {
          Write-Host "Directory already exists: $deployPath"
          # Optional: Clean existing directory
          Get-ChildItem -Path $deployPath -Recurse | Remove-Item -Force -Recurse
          Write-Host "Cleaned existing directory contents"
        }
        
        Write-Host "Extracting zip file to deploy directory..."
        try {
          Expand-Archive -Path $zipPath -DestinationPath $deployPath -Force
          Write-Host "Successfully extracted files to $deployPath"
          
          # Count extracted files for verification
          $extractedFiles = (Get-ChildItem -Path $deployPath -Recurse | Measure-Object).Count
          Write-Host "Extracted $extractedFiles files/directories"
        } catch {
          throw "Failed to extract zip file: $_"
        }
        
        Write-Host "Setting up IIS application..."
        
        # Create or update app pool
        if (-not (Test-Path "IIS:\AppPools\$appPool")) {
          Write-Host "Creating new App Pool: $appPool"
          New-WebAppPool -Name $appPool
          Set-ItemProperty -Path "IIS:\AppPools\$appPool" -Name managedRuntimeVersion -Value ""
          Write-Host "App Pool created"
        } else {
          Write-Host "App Pool already exists: $appPool"
        }
        
        # Create or update application under parent site
        $appExists = Get-WebApplication -Name $appName -Site $parentSite -ErrorAction SilentlyContinue
        
        if ($appExists) {
          Write-Host "Application '$appPath' already exists under site '$parentSite'. Updating properties..."
          Set-ItemProperty -Path "IIS:\Sites\$parentSite$appPath" -Name physicalPath -Value $deployPath
          Set-ItemProperty -Path "IIS:\Sites\$parentSite$appPath" -Name applicationPool -Value $appPool
        } else {
          Write-Host "Creating new application '$appPath' under site '$parentSite'..."
          New-WebApplication -Name $appName -Site $parentSite -PhysicalPath $deployPath -ApplicationPool $appPool -Force
        }
        
        Write-Host "Starting App Pool..."
        Start-WebAppPool -Name $appPool
        
        # Verify app pool is running
        $appPoolState = (Get-WebAppPoolState -Name $appPool).Value
        if ($appPoolState -eq "Started") {
          Write-Host "App Pool is running successfully"
        } else {
          Write-Warning "App Pool state is: $appPoolState"
        }
        
        # Verify application is accessible
        $app = Get-WebApplication -Name $appName -Site $parentSite
        if ($app) {
          Write-Host "Application deployed successfully under path: $appPath"
          Write-Host "Full URL: http://<server-name>:$((Get-WebBinding -Name $parentSite).bindingInformation.Split(':')[1])$appPath"
        } else {
          Write-Warning "Application deployment verification failed."
        }
        
        Write-Host "Deployment complete to IIS path: $deployPath"
        
      } catch {
        Write-Error "Deployment failed with error: $_"
        Write-Error $_.ScriptStackTrace
        exit 1
      }
    pwsh: false
    errorActionPreference: 'stop'

# === CLEAN MEMORY POST-DEPLOY ===
- script: | 
    echo Final memory cleanup...
    powershell -Command "[System.GC]::Collect()"
    powershell -Command "if (Test-Path function:Clear-RecycleBin) { Clear-RecycleBin -Force -ErrorAction SilentlyContinue }"
  displayName: 'Post-deploy memory cleanup'
  continueOnError: true