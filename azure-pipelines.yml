trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Self-hosted agent

variables:
  appName: 'MyNextJsApp'
  parentSite: 'Optimus Apps'  # Parent site name
  unzipPath: 'C:\\Cicd-frontend'
  deployPath: 'C:\\Cicd-frontend\\$(appName)'
  appPoolName: 'AppPool_$(appName)'
  zipPath: '$(Build.ArtifactStagingDirectory)\nextjs-app.zip'

steps:

# === CLEAN MEMORY PRE-STEP ===
- script: |
    echo Cleaning system memory...
    powershell -Command "Clear-EventLog -LogName * -ErrorAction SilentlyContinue"
    powershell -Command "[System.GC]::Collect()"
    powershell -Command "if (Test-Path 'cleanmgr.exe') { Start-Process -NoNewWindow -FilePath 'cleanmgr.exe' -ArgumentList '/sagerun:1' }"
  displayName: 'Free system memory and clean logs (pre-build)'
  continueOnError: true

# === INSTALL NODE ===
- task: NodeTool@0
  inputs:
    versionSpec: '22.x'
  displayName: 'Install Node.js'

# === INSTALL DEPENDENCIES ===
- script: |
    echo Installing dependencies...
    npm install
    echo Cleaning npm and yarn cache...
    npm cache clean --force
    if exist "%LocalAppData%\Yarn\Cache" rmdir /s /q "%LocalAppData%\Yarn\Cache"
  displayName: 'Install dependencies and clean npm/yarn cache'

# === BUILD APP & CLEAN CACHE ===
- script: |
    echo Building the Next.js app...
    npm run build

    echo Removing build caches...
    if exist node_modules\.cache rmdir /s /q node_modules\.cache
    if exist .next\cache rmdir /s /q .next\cache
  displayName: 'Build Next.js and remove build cache'

# === ZIP BUILD ARTIFACTS ===
- script: |
    echo Zipping build artifacts...
    powershell -Command "if (!(Test-Path '.next')) { Write-Error '.next directory not found!'; exit 1 }"
    powershell -Command "Get-ChildItem -Path '.next' -Recurse | Measure-Object | Select-Object -ExpandProperty Count"
    powershell Compress-Archive -Path .next\* -DestinationPath "$(zipPath)" -Force
    powershell -Command "if (!(Test-Path '$(zipPath)')) { Write-Error 'Zip file was not created!'; exit 1 }"
    powershell -Command "Get-Item '$(zipPath)' | Select-Object Length"
  displayName: 'Zip build artifacts'

# === PUBLISH BUILD ARTIFACT ===
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(zipPath)'
    artifactName: 'nextjs-app'
    publishLocation: 'Container'
  displayName: 'Publish zipped artifact'

# === DOWNLOAD ARTIFACT FOR DEPLOYMENT ===
- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: 'nextjs-app'
    downloadPath: '$(Build.SourcesDirectory)\artifact'
  displayName: 'Download build artifact for deployment'

# === VERIFY DOWNLOADED ARTIFACT ===
- script: |
    echo Verifying downloaded artifact...
    powershell -Command "if (!(Test-Path '$(Build.SourcesDirectory)\artifact\nextjs-app\nextjs-app.zip')) { Write-Error 'Downloaded zip file not found!'; exit 1 }"
    powershell -Command "Get-Item '$(Build.SourcesDirectory)\artifact\nextjs-app\nextjs-app.zip' | Select-Object Length"
  displayName: 'Verify downloaded artifact'

# === VERIFY IIS FEATURES ARE INSTALLED ===
- task: PowerShell@2
  displayName: 'Verify IIS Prerequisites and Parent Site'
  inputs:
    targetType: 'inline'
    script: |
      $parentSiteName = "$(parentSite)"

      # Check IIS feature
      $iisFeature = Get-WindowsFeature -Name Web-Server -ErrorAction SilentlyContinue
      if (-not $iisFeature.Installed) {
        Write-Warning "IIS Web-Server feature is not installed on this agent."
      } else {
        Write-Host "IIS Web-Server feature is installed."
      }

      # Load WebAdministration
      try {
        Import-Module WebAdministration -ErrorAction Stop
        Write-Host "WebAdministration module is available."
      } catch {
        Write-Warning "WebAdministration module is not available. Error: $_"
        if (Get-Command Install-WindowsFeature -ErrorAction SilentlyContinue) {
          Install-WindowsFeature -Name Web-Scripting-Tools -ErrorAction SilentlyContinue
        }
      }

      # Check parent site
      $parentSiteExists = Get-Website -Name $parentSiteName -ErrorAction SilentlyContinue
      if (-not $parentSiteExists) {
        Write-Error "Parent site '$parentSiteName' does not exist. Cannot deploy child application."
        exit 1
      } else {
        Write-Host "Parent site '$parentSiteName' exists with the following bindings:"
        $parentSiteExists.bindings.Collection | Format-Table protocol, bindingInformation -AutoSize
      }

      # Add port 8111 binding if missing
      $bindingExists = $parentSiteExists.Bindings.Collection | Where-Object { $_.bindingInformation -match ":8111:" }
      if (-not $bindingExists) {
        Write-Host "Adding HTTP binding for port 8111..."
        New-WebBinding -Name $parentSiteName -Protocol "http" -Port 8111 -IPAddress "*" -HostHeader ""
        Write-Host "HTTP binding for port 8111 added."
      } else {
        Write-Host "Binding for port 8111 already exists."
      }

      Write-Host "--- Existing IIS Sites ---"
      Get-Website | Format-Table Name, ID, State, PhysicalPath -AutoSize

      Write-Host "--- Existing Applications ---"
      Get-WebApplication | Format-Table path, applicationPool, PhysicalPath -AutoSize

      Write-Host "--- Existing Application Pools ---"
      Get-ChildItem IIS:\AppPools | Format-Table Name, State -AutoSize
    pwsh: false
    errorActionPreference: 'continue'

# === DEPLOY TO IIS ===
- task: PowerShell@2
  displayName: 'Deploy as Child Application under Parent Site'
  inputs:
    targetType: 'inline'
    script: |
      $ErrorActionPreference = "Stop"

      $zipPath = "$(Build.SourcesDirectory)\artifact\nextjs-app\nextjs-app.zip"
      $deployPath = "$(deployPath)"
      $appPool = "$(appPoolName)"
      $parentSite = "$(parentSite)"
      $appName = "$(appName)"
      $appPath = "/$appName"

      if (-not (Test-Path $zipPath)) {
        throw "Zip file not found: $zipPath"
      }

      Import-Module WebAdministration

      if (Test-Path "IIS:\AppPools\$appPool") {
        if ((Get-WebAppPoolState -Name $appPool).Value -eq "Started") {
          Stop-WebAppPool -Name $appPool
        }
      }

      if (-not (Test-Path $deployPath)) {
        New-Item -ItemType Directory -Path $deployPath -Force | Out-Null
      } else {
        Get-ChildItem -Path $deployPath -Recurse | Remove-Item -Force -Recurse
      }

      Expand-Archive -Path $zipPath -DestinationPath $deployPath -Force

      if (-not (Test-Path "IIS:\AppPools\$appPool")) {
        New-WebAppPool -Name $appPool
        Set-ItemProperty -Path "IIS:\AppPools\$appPool" -Name managedRuntimeVersion -Value ""
      }

      $appExists = Get-WebApplication -Name $appName -Site $parentSite -ErrorAction SilentlyContinue
      if ($appExists) {
        Set-ItemProperty -Path "IIS:\Sites\$parentSite$appPath" -Name physicalPath -Value $deployPath
        Set-ItemProperty -Path "IIS:\Sites\$parentSite$appPath" -Name applicationPool -Value $appPool
      } else {
        New-WebApplication -Name $appName -Site $parentSite -PhysicalPath $deployPath -ApplicationPool $appPool -Force
      }

      Start-WebAppPool -Name $appPool

      Write-Host "Application deployed successfully under path: $appPath"
      Write-Host "Full URL: http://<server-name>:8111$appPath"
    pwsh: false
    errorActionPreference: 'stop'

# === CLEAN MEMORY POST-DEPLOY ===
- script: | 
    echo Final memory cleanup...
    powershell -Command "[System.GC]::Collect()"
    powershell -Command "if (Test-Path function:Clear-RecycleBin) { Clear-RecycleBin -Force -ErrorAction SilentlyContinue }"
  displayName: 'Post-deploy memory cleanup'
  continueOnError: true
