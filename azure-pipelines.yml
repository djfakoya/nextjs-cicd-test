trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Self-hosted agent

variables:
  appName: 'MyNextJsApp'
  parentSite: 'Optimus Apps'
  unzipPath: 'C:\\Cicd-frontend'
  deployPath: 'C:\\Cicd-frontend\\$(appName)'
  siteName: 'Optimus_$(appName)'
  appPoolName: 'AppPool_$(appName)'
  portHttp: 8026
  portHttps: 8025
  zipPath: '$(Build.ArtifactStagingDirectory)\nextjs-app.zip'

steps:

# === CLEAN MEMORY PRE-STEP ===
- script: |
    echo Cleaning system memory...
    powershell -Command "Clear-EventLog -LogName *"
    powershell -Command "[System.GC]::Collect()"
    powershell -Command "Start-Process -NoNewWindow -FilePath 'cleanmgr.exe' -ArgumentList '/sagerun:1'"
  displayName: 'Free system memory and clean logs (pre-build)'

# === INSTALL NODE ===
- task: NodeTool@0
  inputs:
    versionSpec: '22.x'
  displayName: 'Install Node.js'

# === INSTALL DEPENDENCIES ===
- script: |
    echo Installing dependencies...
    npm install
    echo Cleaning npm and yarn cache...
    npm cache clean --force
    if exist "%LocalAppData%\Yarn\Cache" rmdir /s /q "%LocalAppData%\Yarn\Cache"
  displayName: 'Install dependencies and clean npm/yarn cache'

# === BUILD APP & CLEAN CACHE ===
- script: |
    echo Building the Next.js app...
    npm run build

    echo Removing build caches...
    if exist node_modules\.cache rmdir /s /q node_modules\.cache
    if exist .next\cache rmdir /s /q .next\cache
  displayName: 'Build Next.js and remove build cache'

# === ZIP BUILD ARTIFACTS ===
- script: |
    echo Zipping build artifacts...
    powershell Compress-Archive -Path .next\* -DestinationPath "$(zipPath)" -Force
  displayName: 'Zip build artifacts'

# === PUBLISH BUILD ARTIFACT ===
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(zipPath)'
    artifactName: 'nextjs-app'
    publishLocation: 'Container'
  displayName: 'Publish zipped artifact'

# === DOWNLOAD ARTIFACT FOR DEPLOYMENT ===
- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: 'nextjs-app'
    downloadPath: '$(Build.SourcesDirectory)\artifact'
  displayName: 'Download build artifact for deployment'

# === CD: DEPLOY TO IIS ===
- task: PowerShell@2
  displayName: 'Deploy to IIS via PowerShell script'
  inputs:
    targetType: 'inline'
    script: |
      $zipPath = "$(Build.SourcesDirectory)\artifact\nextjs-app\nextjs-app.zip"
      $deployPath = "$(deployPath)"
      $appPool = "$(appPoolName)"
      $siteName = "$(siteName)"
      $portHttp = $(portHttp)
      $portHttps = $(portHttps)

      Write-Host "Stopping existing App Pool if exists..."
      if (Get-WebAppPoolState -Name $appPool -ErrorAction SilentlyContinue) {
        Stop-WebAppPool -Name $appPool
      }

      Write-Host "Creating deploy directory if not exists..."
      if (!(Test-Path -Path $deployPath)) {
        New-Item -ItemType Directory -Path $deployPath | Out-Null
      }

      Write-Host "Extracting zip file to deploy directory..."
      Expand-Archive -Path $zipPath -DestinationPath $deployPath -Force

      Write-Host "Setting up IIS site..."
      Import-Module WebAdministration

      if (!(Test-Path "IIS:\Sites\$siteName")) {
        New-WebAppPool -Name $appPool
        New-Website -Name $siteName -Port $portHttp -IPAddress "*" -PhysicalPath $deployPath -ApplicationPool $appPool
      } else {
        Set-ItemProperty "IIS:\Sites\$siteName" -Name physicalPath -Value $deployPath
      }

      Write-Host "Starting App Pool and Site..."
      Start-WebAppPool -Name $appPool
      Start-Website -Name $siteName

      Write-Host "Deployment complete to IIS path: $deployPath"
      pwsh: false

# === CLEAN MEMORY POST-DEPLOY ===
- script: | 
    echo Final memory cleanup...
    powershell -Command "[System.GC]::Collect()"
    powershell -Command "Clear-RecycleBin -Force"
  displayName: 'Post-deploy memory cleanup'
