trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Self-hosted agent

variables:
  appName: 'MyNextJsApp'
  parentSite: 'Optimus Apps'
  deployPath: 'C:\\inetpub\\wwwroot\\Optimus Apps\\$(appName)'
  siteName: 'Optimus_$(appName)'
  appPoolName: 'AppPool_$(appName)'
  portHttp: 8026
  portHttps: 8025

steps:
# Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '22.x'
  displayName: 'Install Node.js'

# Install dependencies
- script: |
    echo Installing dependencies...
    npm install
    echo Cleaning npm cache...
    npm cache clean --force
  displayName: 'Install dependencies'

# Build the Next.js app
- script: |
    echo Building the Next.js app...
    npm run build
    echo Cleaning up cache...
    if exist node_modules\.cache rmdir /s /q node_modules\.cache
    if exist .next\cache rmdir /s /q .next\cache
  displayName: 'Build Next.js app and clean up'

# Publish build artifacts
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '.next'
    artifactName: 'nextjs-app'
    publishLocation: 'Container'

# âœ… CD - Deployment Step (PowerShell)
- task: PowerShell@2
  displayName: 'Deploy to IIS'
  inputs:
    targetType: 'inline'
    script: |
      $ErrorActionPreference = "Stop"

      Write-Host "Creating deployment folder if it doesn't exist..."
      $deployPath = "$(deployPath)"
      if (!(Test-Path $deployPath)) {
        New-Item -ItemType Directory -Force -Path $deployPath
      }

      Write-Host "Extracting build artifacts..."
      $artifactPath = "$(Pipeline.Workspace)\nextjs-app"
      Copy-Item -Path "$artifactPath\*" -Destination $deployPath -Recurse -Force

      Import-Module WebAdministration

      Write-Host "Creating application pool if not exists..."
      if (!(Get-WebAppPoolState -Name "$(appPoolName)" -ErrorAction SilentlyContinue)) {
        New-WebAppPool -Name "$(appPoolName)"
      }

      Write-Host "Creating or updating site under Optimus Apps..."
      $siteExists = Get-Website | Where-Object { $_.Name -eq "$(siteName)" }
      if (!$siteExists) {
        New-Website -Name "$(siteName)" -PhysicalPath $deployPath -Port $env:portHttp -ApplicationPool "$(appPoolName)"
        Set-ItemProperty "IIS:\Sites\$(siteName)" -Name bindings -Value @(
          @{protocol="http"; bindingInformation="*:$(portHttp):"}
          @{protocol="https"; bindingInformation="*:$(portHttps):"}
        )
      } else {
        Set-ItemProperty "IIS:\Sites\$(siteName)" -Name physicalPath -Value $deployPath
        Restart-WebAppPool -Name "$(appPoolName)"
        Restart-WebSite -Name "$(siteName)"
      }

      Write-Host "Deployment complete."
